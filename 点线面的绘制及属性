#define GLUT_DISABLE_ATEXIT_HACK		//神秘代码
#include<Windows.h>
#include<gl\glut.h>


void draw()
{
	glClearColor(0.4, 0.5, 0.9, 0.0);	//设置清除颜色为黑色（底色）
	glClear(GL_COLOR_BUFFER_BIT);		//不可缺，清除缓冲区

	//点的绘制
	glPointSize(10);			//点的大小
	glBegin(GL_POINTS);
	glVertex2f(0.0,0.0);	//gl库中调用Vertex函数设置3个浮点数
	glVertex2f(0.4,0.3);
	glEnd();

	//线的绘制   启用反走样,宽度设置
	glEnable(GL_BLEND);
	glEnable(GL_LINE_SMOOTH);
	glHint(GL_LINE_SMOOTH_HINT,GL_NICEST);
	
	glLineWidth(20);			//线的宽度
	
	glEnable(GL_LINE_STIPPLE);//调用函数，绘制虚线
	glLineStipple(0,12);//（充当倍数增加模式宽度，指定画线模式）
	
	glBegin(GL_LINES);
	glVertex3f(0.0,0.0,0.0);
	glVertex3f(0.4,0.3,0.0);
	glVertex3f(0.8,0.6,0.0);
	glVertex3f(0.4,0.4,0.0);
	glEnd();

	//三角形（当前选择颜色填充）
	glBegin(GL_TRIANGLES);
	glVertex2f(0.0,0.0);
	glVertex2f(-0.7,-0.5);
	glVertex2f(-0.5,-0.5);
	glEnd();

	//四边形  略

	//多边形   边缘设置修改，上色处理，显示轮廓
	glPolygonMode(GL_FRONT,GL_LINE);
	glShadeModel(GL_SMOOTH);//顶点光滑上色，见下
	glBegin(GL_POLYGON);//边缘标记，见下
								glColor3f(0.1,0.3,0.6);											glVertex3f(0.0,0.0,0.0);
	glEdgeFlag(GL_FALSE);		glColor3f(0.2,0.6,0.6);											glVertex3f(0.7,0.5,0.0);
	glEdgeFlag(GL_TRUE);		glColor3f(0.9,0.3,0.7);			glEdgeFlag(GL_TRUE);			glVertex3f(0.5,0.5,0.0);
																glEdgeFlag(GL_FALSE);			glVertex3f(-0.2,0.9,0.0);
																glEdgeFlag(GL_TRUE);			glVertex3f(-0.3,-0.5,0.0);
	glEnd();

	/***绘制函数
	glBegin(GL_POINTS);			//点的绘制
	
	glBegin(GL_LINES);			//线的绘制（每两个点）
	glBegin(GL_LINES_STRIP);	//从第一个点往后连线
	glBegin(GL_LINES_LOOP);		//从第一个往后封闭连线
	
	glBegin(GL_TRIANGLES);		//从第一个点开始每三个点绘制一个三角形
	glBegin(GL_TRIANGLES_STRIP);//前三个顶点构成一个三角形，以后每一个顶点与前2个顶点构成一个新的三角形
	glBegin(GL_TRIANGLES_FAN);	//第一个点为中心，前三个点为第一个三角形，以后每一个点与前一个点和中心构成扇形三角形，顺时针穿过顶点
	
	glBegin(GL_QUADS);			//每四个点绘制一个四边形
	glBegin(GL_QUADS_STRIP);
	
	glBegin(GL_POLYGON);		//按顺序连接所有点绘制一个多边形（不可相交）
	***/
	
	/***多边形面的属性

	正反（绕法）：
	一般指定逆时针顺序显示的多边形称为正面
	
	颜色：
	平面颜色处理（单）/光滑颜色处理（多）
	glColor3f(0.1,0.2,0.3);
	glShadeModel(GL_FLAT);		//调用函数，采用第一个顶点颜色
	glShadeModel(GL_SMOOTH);	//调用函数，各个顶点光滑上色

	显示模式：
	glpolygonMode(GL_enum face,GL_enum mode);
	face:GL_FRONT,GL_BACK,GL_FRONT_AND_BACK    //指定改变面
	mode:GL_FILL 默认值    GL_LINE  生成轮廓   GL_POINT  生成顶点

	法向量：
	垂直于面向上的向量，与光照有关

	边缘标记：
	通过设置和标记，可以区别图形边界线和图形内部线
	glEdgFlag(GL_TRUE);		//边界
	glEdgFLag(GL_FALSE);	//内部，消除

	反走样：
	清除非水平垂直直线的锯齿状外观
	RGBA颜色混合反走样
	启用混合，启用反走样 GL_Enable(GL_BLEND)
	启用几何图元反走样   GL_Enable(mode)  Mode取GL_POINT_SMOOTM ,GL_LINE_SMOOTH,GL_POLOGY_SMOOTH
						GL_Hint(target,hint)  (定义对象，方法)
						target:  GL_SMOOTH_POINT_HINT  点
								GL_SMOOTH_LINE_HINT    线
								GL_SMOOTH_POLOGY_HINT  多边形
								GL_FOG_HINT  雾化计算
						hint：  GL_FASTEST		最有效
								GL_NICEST		最高质量
								GL_DONT_CARE  没有选择




	***/


	glFlush();//执行，发送命令并返回
}

void redraw(int x,int y)		//视口内图形不可变形
{
	int dis = x>y?y:x;			//x>y? 1=x,0=y
	glViewport(0,0,dis,dis);	//(左下角位置)+(宽高)
}

void main()
{
	glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);		//设置图形显示模式,单缓存，颜色
	glutInitWindowPosition(0,0);					//设置初始化窗口位置（x,y）
	glutInitWindowSize(500,500);					//设置初始窗口大小
	glutCreateWindow("test");						//创建一个顶层窗口
	
	glutDisplayFunc(draw);							//注册当前窗口的显示回调函数
	glutReshapeFunc(redraw);						//创建一个视口
	glutMainLoop();									//事件循环，程序结束即返回


}
